name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: 'manual-release'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: claude-powerline
            asset_name: claude-powerline-linux-x64
            
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: claude-powerline.exe
            asset_name: claude-powerline-windows-x64.exe
            
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: claude-powerline
            asset_name: claude-powerline-macos-x64
            
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: claude-powerline
            asset_name: claude-powerline-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}
          else
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          fi
          cd ../../..

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} release-assets/ \;
          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## 🚀 Automated Release ${{ steps.version.outputs.VERSION }}
            
            ### 📦 Available Downloads
            
            #### 🐧 Linux
            - `claude-powerline-linux-x64.tar.gz` - Linux x86_64
            
            #### 🪟 Windows  
            - `claude-powerline-windows-x64.exe.zip` - Windows x86_64
            
            #### 🍎 macOS
            - `claude-powerline-macos-x64.tar.gz` - macOS Intel
            - `claude-powerline-macos-arm64.tar.gz` - macOS Apple Silicon
            
            ### 📝 Installation
            
            **Linux/macOS:**
            ```bash
            tar xzf claude-powerline-*.tar.gz
            chmod +x claude-powerline
            sudo mv claude-powerline /usr/local/bin/
            ```
            
            **Windows:**
            Extract the zip and add to your PATH.
            
            ---
            *Built automatically by GitHub Actions*
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}